type: edu
files:
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |-
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re


    class CCATest(StageTest):

        def generate(self):
            return [TestCase(time_limit=1800000)]

        def check(self, reply, attach):
            lines = reply.split('\n')
            if "" in lines:
                lines = list(filter(lambda a: a != "", lines))

            # general
            lines2check = []

            for item in lines:
                if any(key_word in item.replace(" ", "").lower() for key_word in ['k-nearest', 'forestalgorithm', 'accuracy']):
                    lines2check.append(item)

            if len(lines2check) != 4:
                return CheckResult.wrong(
                    feedback='Something is wrong with the output format, check the example output at the stage 5')

            # k-nearest neighbours classifier
            algorithm_name_reply = lines2check[0]
            accuracy_reply = re.findall(r'\d*\.\d+|\d+', lines2check[1])
            if len(accuracy_reply) != 1:
                return CheckResult.wrong(feedback='It should be one number in the "accuracy:" section')

            if not 0.957 <= float(accuracy_reply[0]) < 1:
                return CheckResult.wrong(
                    feedback=f"The accuracy for {algorithm_name_reply} is wrong")

            # random forest classifier
            algorithm_name_reply = lines2check[2]
            accuracy_reply = re.findall(r'\d*\.\d+|\d+', lines2check[3])
            if len(accuracy_reply) != 1:
                return CheckResult.wrong(feedback='It should be one number in the "accuracy:" section')

            if not 0.945 <= float(accuracy_reply[0]) < 1:
                return CheckResult.wrong(
                    feedback=f"The accuracy for {algorithm_name_reply} is wrong")
            return CheckResult.correct()


    if __name__ == '__main__':
        CCATest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import CCATest

    if __name__ == '__main__':
        CCATest().run_tests()
  learner_created: false
- name: analysis.py
  visible: true
  text: |
    import numpy as np
    from tensorflow import keras
    from sklearn.model_selection import train_test_split
    import pandas as pd


    (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()
    new_form = (x_train.shape[0], x_train.shape[1] * x_train.shape[2])
    x_train_reshape = np.reshape(x_train, new_form)
    # print('Classes:', np.unique(y_train))
    # print("Features' shape:", x_train_reshape.shape)
    # print("Target's shape:", y_train.shape)
    # print('min:', np.amin(x_train_reshape), 'max:', np.amax(x_train_reshape))

    x_cut = x_train_reshape[0:6000]
    y_cut = y_train[0:6000]
    x_tr, x_tst, y_tr, y_tst = train_test_split(x_cut, y_cut, test_size=0.3, random_state=40, shuffle=False)
    classes = np.unique(y_train)
    rel_count = pd.Series(y_tr)
    print('x_train shape:', x_tr.shape)
    print('x_test shape:', x_tst.shape)
    print('y_train shape:', y_tr.shape)
    print('y_test shape:', y_tst.shape)
    print('Proportion of samples per class in train set:')
    print(rel_count.value_counts(normalize=True))
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/15237#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 27 Mar 2023 13:02:37 UTC"
record: -1
